volumes:
  ckan_storage:
  pg_data:
  solr_data:
  minio_data:

services:

  ckan-dev:
    container_name: ckan-tdc-dev
    build:
      context: ckan/
      dockerfile: Dockerfile.dev
      args:
        - TZ=${TZ}
    env_file:
      - .env
    depends_on:
      solr:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "0.0.0.0:${CKAN_PORT_HOST}:${CKAN_PORT}"
    volumes:
      - ckan_storage:/var/lib/ckan
      - ./src:/srv/app/src_extensions
    restart: always
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://ckan-dev:5000"]
      interval: 30s
      timeout: 30s
      retries: 3
    
  datapusher:
    container_name: datapusher-plus-tdc-dev
    env_file:
      - .env
    build:
      context: ./datapusher
      dockerfile: Dockerfile
    restart: always
    environment:
      - WRITE_ENGINE_URL=postgresql://postgres:postgres@db/datastore
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:postgres@db/datapusher_jobs
    depends_on:
      ckan-dev:
        condition: service_healthy
      db:
        condition: service_healthy
    ports:
      - "8800:8800"

  db:
    container_name: ckan-tdc-db
    build:
      context: postgresql/
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - CKAN_DB_USER
      - CKAN_DB_PASSWORD
      - CKAN_DB
      - DATASTORE_READONLY_USER
      - DATASTORE_READONLY_PASSWORD
      - DATASTORE_DB
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
    ports:
      - "0.0.0.0:5432:5432"
     
  solr:
    container_name: ckan-tdc-solr
    image: ckan/ckan-solr:${SOLR_IMAGE_VERSION}
    volumes:
      - solr_data:/var/solr
      - ./src/ckanext-tdc/solr/schema.xml:/opt/solr/server/solr/configsets/ckan/conf/schema.xml
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:8983/solr/"]

  redis:
    container_name: ckan-tdc-redis
    image: redis:${REDIS_VERSION}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-e", "QUIT"]

  minio:
    container_name: minio-tdc
    image: minio/minio
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "39323:39323"
    command: server --console-address ":39323" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    depends_on:
      - ckan-dev

  minio-setup:
    image: minio/mc
    entrypoint: ["/bin/sh"]
    depends_on:
      - minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ./ckan/setup/create_minio_bucket.sh:/srv/app/create_minio_bucket.sh
    command: ["-c", "/srv/app/create_minio_bucket.sh"]

